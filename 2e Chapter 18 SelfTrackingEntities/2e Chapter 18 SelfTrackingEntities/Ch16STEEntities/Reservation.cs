//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace BAGA
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Customer))]
    [KnownType(typeof(Trip))]
    [KnownType(typeof(Payment))]
    public partial class Reservation: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ReservationID
        {
            get { return _reservationID; }
            set
            {
                if (_reservationID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReservationID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reservationID = value;
                    OnPropertyChanged("ReservationID");
                }
            }
        }
        private int _reservationID;
    
        [DataMember]
        public System.DateTime ReservationDate
        {
            get { return _reservationDate; }
            set
            {
                if (_reservationDate != value)
                {
                    _reservationDate = value;
                    OnPropertyChanged("ReservationDate");
                }
            }
        }
        private System.DateTime _reservationDate;
    
        [DataMember]
        public int ContactID
        {
            get { return _contactID; }
            set
            {
                if (_contactID != value)
                {
    //julie was here
                    ChangeTracker.RecordOriginalValue("ContactID", _contactID);
                    if (!IsDeserializing)
                    {
                        if (Customer != null && Customer.ContactID != value)
                        {
                            Customer = null;
                        }
                    }
                    _contactID = value;
                    OnPropertyChanged("ContactID");
                }
            }
        }
        private int _contactID;
    
        [DataMember]
        public Nullable<int> TripID
        {
            get { return _tripID; }
            set
            {
                if (_tripID != value)
                {
    //julie was here
                    ChangeTracker.RecordOriginalValue("TripID", _tripID);
                    if (!IsDeserializing)
                    {
                        if (Trip != null && Trip.TripID != value)
                        {
                            Trip = null;
                        }
                    }
                    _tripID = value;
                    OnPropertyChanged("TripID");
                }
            }
        }
        private Nullable<int> _tripID;
    
        [DataMember]
        public byte[] TimeStamp
        {
            get { return _timeStamp; }
            set
            {
                if (_timeStamp != value)
                {
                    _timeStamp = value;
                    OnPropertyChanged("TimeStamp");
                }
            }
        }
        private byte[] _timeStamp;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                    OnNavigationPropertyChanged("Customer");
                }
            }
        }
        private Customer _customer;
    
        [DataMember]
        public Trip Trip
        {
            get { return _trip; }
            set
            {
                if (!ReferenceEquals(_trip, value))
                {
                    var previousValue = _trip;
                    _trip = value;
                    FixupTrip(previousValue);
                    OnNavigationPropertyChanged("Trip");
                }
            }
        }
        private Trip _trip;
    
        [DataMember]
        public TrackableCollection<Payment> Payments
        {
            get
            {
                if (_payments == null)
                {
                    _payments = new TrackableCollection<Payment>();
                    _payments.CollectionChanged += FixupPayments;
                }
                return _payments;
            }
            set
            {
                if (!ReferenceEquals(_payments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_payments != null)
                    {
                        _payments.CollectionChanged -= FixupPayments;
                    }
                    _payments = value;
                    if (_payments != null)
                    {
                        _payments.CollectionChanged += FixupPayments;
                    }
                    OnNavigationPropertyChanged("Payments");
                }
            }
        }
        private TrackableCollection<Payment> _payments;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Customer = null;
            Trip = null;
            Payments.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupCustomer(Customer previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Reservations.Contains(this))
            {
                previousValue.Reservations.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Reservations.Contains(this))
                {
                    Customer.Reservations.Add(this);
                }
    
                ContactID = Customer.ContactID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customer")
                    && (ChangeTracker.OriginalValues["Customer"] == Customer))
                {
                    ChangeTracker.OriginalValues.Remove("Customer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Customer", previousValue);
                }
                if (Customer != null && !Customer.ChangeTracker.ChangeTrackingEnabled)
                {
                    Customer.StartTracking();
                }
            }
        }
    
        private void FixupTrip(Trip previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Reservations.Contains(this))
            {
                previousValue.Reservations.Remove(this);
            }
    
            if (Trip != null)
            {
                if (!Trip.Reservations.Contains(this))
                {
                    Trip.Reservations.Add(this);
                }
    
                TripID = Trip.TripID;
            }
            else if (!skipKeys)
            {
                TripID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Trip")
                    && (ChangeTracker.OriginalValues["Trip"] == Trip))
                {
                    ChangeTracker.OriginalValues.Remove("Trip");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Trip", previousValue);
                }
                if (Trip != null && !Trip.ChangeTracker.ChangeTrackingEnabled)
                {
                    Trip.StartTracking();
                }
            }
        }
    
        private void FixupPayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Payment item in e.NewItems)
                {
                    item.Reservation = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Payments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Payment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Reservation, this))
                    {
                        item.Reservation = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Payments", item);
                    }
                }
            }
        }

        #endregion
    }
}
