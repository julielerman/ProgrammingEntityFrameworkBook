//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets3F47FA755DC9A088ECCD610F03E2CD06))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets3F47FA755DC9A088ECCD610F03E2CD06 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets3F47FA755DC9A088ECCD610F03E2CD06()
        {
            this.EdmEntityContainerName = "AWEntities";
            this.StoreEntityContainerName = "AWModelStoreContainer";
            this.HashOverMappingClosure = "49c6612880df85a636a10a2a682bef06";
            this.HashOverAllExtentViews = "9e4e5528b03c326563b74529971dbc07";
            this.ViewCount = 32;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder();
            if ((index == 0))
            {
                // return view for AWModelStoreContainer.Customer
                viewString.Append(@"
    SELECT VALUE -- Constructing Customer
        [AWModel.Store.Customer](T1.Customer_CustomerID, T1.Customer_NameStyle, T1.Customer_Title, T1.Customer_FirstName, T1.Customer_MiddleName, T1.Customer_LastName, T1.Customer_Suffix, T1.Customer_CompanyName, T1.Customer_SalesPerson, T1.Customer_EmailAddress, T1.Customer_Phone, T1.Customer_PasswordHash, T1.Customer_PasswordSalt, T1.Customer_rowguid, T1.Customer_ModifiedDate)
    FROM (
        SELECT 
            T.CustomerID AS Customer_CustomerID, 
            T.NameStyle AS Customer_NameStyle, 
            T.Title AS Customer_Title, 
            T.FirstName AS Customer_FirstName, 
            T.MiddleName AS Customer_MiddleName, 
            T.LastName AS Customer_LastName, 
            T.Suffix AS Customer_Suffix, 
            T.CompanyName AS Customer_CompanyName, 
            T.SalesPerson AS Customer_SalesPerson, 
            T.EmailAddress AS Customer_EmailAddress, 
            T.Phone AS Customer_Phone, 
            T.PasswordHash AS Customer_PasswordHash, 
            T.PasswordSalt AS Customer_PasswordSalt, 
            T.rowguid AS Customer_rowguid, 
            T.ModifiedDate AS Customer_ModifiedDate, 
            True AS _from0
        FROM AWEntities.AWCustomers AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.Customer", viewString.ToString());
            }
            if ((index == 1))
            {
                // return view for AWModelStoreContainer.SalesOrderDetail
                viewString.Append(@"
    SELECT VALUE -- Constructing SalesOrderDetail
        [AWModel.Store.SalesOrderDetail](T1.SalesOrderDetail_SalesOrderID, T1.SalesOrderDetail_SalesOrderDetailID, T1.SalesOrderDetail_OrderQty, T1.SalesOrderDetail_ProductID, T1.SalesOrderDetail_UnitPrice, T1.SalesOrderDetail_UnitPriceDiscount, T1.SalesOrderDetail_LineTotal, T1.SalesOrderDetail_rowguid, T1.SalesOrderDetail_ModifiedDate)
    FROM (
        SELECT 
            T.SalesOrderID AS SalesOrderDetail_SalesOrderID, 
            T.SalesOrderDetailID AS SalesOrderDetail_SalesOrderDetailID, 
            T.OrderQty AS SalesOrderDetail_OrderQty, 
            T.ProductID AS SalesOrderDetail_ProductID, 
            T.UnitPrice AS SalesOrderDetail_UnitPrice, 
            T.UnitPriceDiscount AS SalesOrderDetail_UnitPriceDiscount, 
            T.LineTotal AS SalesOrderDetail_LineTotal, 
            T.rowguid AS SalesOrderDetail_rowguid, 
            T.ModifiedDate AS SalesOrderDetail_ModifiedDate, 
            True AS _from0
        FROM AWEntities.SalesOrderDetails AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.SalesOrderDetail", viewString.ToString());
            }
            if ((index == 2))
            {
                // return view for AWModelStoreContainer.SalesOrderHeader
                viewString.Append("\r\n    SELECT VALUE -- Constructing SalesOrderHeader\r\n        [AWModel.Store.Sale");
                viewString.Append("sOrderHeader](T1.SalesOrderHeader_SalesOrderID, T1.SalesOrderHeader_RevisionNumb");
                viewString.Append("er, T1.SalesOrderHeader_OrderDate, T1.SalesOrderHeader_DueDate, T1.SalesOrderHea");
                viewString.Append("der_ShipDate, T1.SalesOrderHeader_Status, T1.SalesOrderHeader_OnlineOrderFlag, T");
                viewString.Append("1.SalesOrderHeader_SalesOrderNumber, T1.SalesOrderHeader_PurchaseOrderNumber, T1");
                viewString.Append(".SalesOrderHeader_AccountNumber, T1.SalesOrderHeader_CustomerID, T1.SalesOrderHe");
                viewString.Append("ader_ShipToAddressID, T1.SalesOrderHeader_BillToAddressID, T1.SalesOrderHeader_S");
                viewString.Append("hipMethod, T1.SalesOrderHeader_CreditCardApprovalCode, T1.SalesOrderHeader_SubTo");
                viewString.Append("tal, T1.SalesOrderHeader_TaxAmt, T1.SalesOrderHeader_Freight, T1.SalesOrderHeade");
                viewString.Append("r_TotalDue, T1.SalesOrderHeader_Comment, T1.SalesOrderHeader_rowguid, T1.SalesOr");
                viewString.Append("derHeader_ModifiedDate)\r\n    FROM (\r\n        SELECT \r\n            T.SalesOrderID");
                viewString.Append(" AS SalesOrderHeader_SalesOrderID, \r\n            T.RevisionNumber AS SalesOrderH");
                viewString.Append("eader_RevisionNumber, \r\n            T.OrderDate AS SalesOrderHeader_OrderDate, \r");
                viewString.Append("\n            T.DueDate AS SalesOrderHeader_DueDate, \r\n            T.ShipDate AS ");
                viewString.Append("SalesOrderHeader_ShipDate, \r\n            T.Status AS SalesOrderHeader_Status, \r\n");
                viewString.Append("            T.OnlineOrderFlag AS SalesOrderHeader_OnlineOrderFlag, \r\n           ");
                viewString.Append(" T.SalesOrderNumber AS SalesOrderHeader_SalesOrderNumber, \r\n            T.Purcha");
                viewString.Append("seOrderNumber AS SalesOrderHeader_PurchaseOrderNumber, \r\n            T.AccountNu");
                viewString.Append("mber AS SalesOrderHeader_AccountNumber, \r\n            T.CustomerID AS SalesOrder");
                viewString.Append("Header_CustomerID, \r\n            T.ShipToAddressID AS SalesOrderHeader_ShipToAdd");
                viewString.Append("ressID, \r\n            T.BillToAddressID AS SalesOrderHeader_BillToAddressID, \r\n ");
                viewString.Append("           T.ShipMethod AS SalesOrderHeader_ShipMethod, \r\n            T.CreditCa");
                viewString.Append("rdApprovalCode AS SalesOrderHeader_CreditCardApprovalCode, \r\n            T.SubTo");
                viewString.Append("tal AS SalesOrderHeader_SubTotal, \r\n            T.TaxAmt AS SalesOrderHeader_Tax");
                viewString.Append("Amt, \r\n            T.Freight AS SalesOrderHeader_Freight, \r\n            T.TotalD");
                viewString.Append("ue AS SalesOrderHeader_TotalDue, \r\n            T.Comment AS SalesOrderHeader_Com");
                viewString.Append("ment, \r\n            T.rowguid AS SalesOrderHeader_rowguid, \r\n            T.Modif");
                viewString.Append("iedDate AS SalesOrderHeader_ModifiedDate, \r\n            True AS _from0\r\n        ");
                viewString.Append("FROM AWEntities.SalesOrderHeaders AS T\r\n    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.SalesOrderHeader", viewString.ToString());
            }
            if ((index == 3))
            {
                // return view for AWModelStoreContainer.Address
                viewString.Append(@"
    SELECT VALUE -- Constructing Address
        [AWModel.Store.Address](T1.Address_AddressID, T1.Address_AddressLine1, T1.Address_AddressLine2, T1.Address_City, T1.Address_StateProvince, T1.Address_CountryRegion, T1.Address_PostalCode, T1.Address_rowguid, T1.Address_ModifiedDate)
    FROM (
        SELECT 
            T.AddressID AS Address_AddressID, 
            T.AddressLine1 AS Address_AddressLine1, 
            T.AddressLine2 AS Address_AddressLine2, 
            T.City AS Address_City, 
            T.StateProvince AS Address_StateProvince, 
            T.CountryRegion AS Address_CountryRegion, 
            T.PostalCode AS Address_PostalCode, 
            T.rowguid AS Address_rowguid, 
            T.ModifiedDate AS Address_ModifiedDate, 
            True AS _from0
        FROM AWEntities.Addresses AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.Address", viewString.ToString());
            }
            if ((index == 4))
            {
                // return view for AWModelStoreContainer.CustomerAddress
                viewString.Append(@"
    SELECT VALUE -- Constructing CustomerAddress
        [AWModel.Store.CustomerAddress](T1.CustomerAddress_CustomerID, T1.CustomerAddress_AddressID, T1.CustomerAddress_AddressType, T1.CustomerAddress_rowguid, T1.CustomerAddress_ModifiedDate)
    FROM (
        SELECT 
            T.CustomerID AS CustomerAddress_CustomerID, 
            T.AddressID AS CustomerAddress_AddressID, 
            T.AddressType AS CustomerAddress_AddressType, 
            T.rowguid AS CustomerAddress_rowguid, 
            T.ModifiedDate AS CustomerAddress_ModifiedDate, 
            True AS _from0
        FROM AWEntities.CustomerAddresses AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.CustomerAddress", viewString.ToString());
            }
            if ((index == 5))
            {
                // return view for AWModelStoreContainer.Product
                viewString.Append(@"
    SELECT VALUE -- Constructing Product
        [AWModel.Store.Product](T1.Product_ProductID, T1.Product_Name, T1.Product_ProductNumber, T1.Product_Color, T1.Product_StandardCost, T1.Product_ListPrice, T1.Product_Size, T1.Product_Weight, T1.Product_ProductCategoryID, T1.Product_ProductModelID, T1.Product_SellStartDate, T1.Product_SellEndDate, T1.Product_DiscontinuedDate, T1.Product_ThumbNailPhoto, T1.Product_ThumbnailPhotoFileName, T1.Product_rowguid, T1.Product_ModifiedDate)
    FROM (
        SELECT 
            T.ProductID AS Product_ProductID, 
            T.Name AS Product_Name, 
            T.ProductNumber AS Product_ProductNumber, 
            T.Color AS Product_Color, 
            T.StandardCost AS Product_StandardCost, 
            T.ListPrice AS Product_ListPrice, 
            T.Size AS Product_Size, 
            T.Weight AS Product_Weight, 
            T.ProductCategoryID AS Product_ProductCategoryID, 
            T.ProductModelID AS Product_ProductModelID, 
            T.SellStartDate AS Product_SellStartDate, 
            T.SellEndDate AS Product_SellEndDate, 
            T.DiscontinuedDate AS Product_DiscontinuedDate, 
            T.ThumbNailPhoto AS Product_ThumbNailPhoto, 
            T.ThumbnailPhotoFileName AS Product_ThumbnailPhotoFileName, 
            T.rowguid AS Product_rowguid, 
            T.ModifiedDate AS Product_ModifiedDate, 
            True AS _from0
        FROM AWEntities.Products AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.Product", viewString.ToString());
            }
            if ((index == 6))
            {
                // return view for AWModelStoreContainer.ProductCategory
                viewString.Append(@"
    SELECT VALUE -- Constructing ProductCategory
        [AWModel.Store.ProductCategory](T1.ProductCategory_ProductCategoryID, T1.ProductCategory_ParentProductCategoryID, T1.ProductCategory_Name, T1.ProductCategory_rowguid, T1.ProductCategory_ModifiedDate)
    FROM (
        SELECT 
            T.ProductCategoryID AS ProductCategory_ProductCategoryID, 
            T.ParentProductCategoryID AS ProductCategory_ParentProductCategoryID, 
            T.Name AS ProductCategory_Name, 
            T.rowguid AS ProductCategory_rowguid, 
            T.ModifiedDate AS ProductCategory_ModifiedDate, 
            True AS _from0
        FROM AWEntities.ProductCategories AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.ProductCategory", viewString.ToString());
            }
            if ((index == 7))
            {
                // return view for AWModelStoreContainer.ProductDescription
                viewString.Append(@"
    SELECT VALUE -- Constructing ProductDescription
        [AWModel.Store.ProductDescription](T1.ProductDescription_ProductDescriptionID, T1.ProductDescription_Description, T1.ProductDescription_rowguid, T1.ProductDescription_ModifiedDate)
    FROM (
        SELECT 
            T.ProductDescriptionID AS ProductDescription_ProductDescriptionID, 
            T.Description AS ProductDescription_Description, 
            T.rowguid AS ProductDescription_rowguid, 
            T.ModifiedDate AS ProductDescription_ModifiedDate, 
            True AS _from0
        FROM AWEntities.ProductDescriptions AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.ProductDescription", viewString.ToString());
            }
            if ((index == 8))
            {
                // return view for AWModelStoreContainer.ProductModel
                viewString.Append(@"
    SELECT VALUE -- Constructing ProductModel
        [AWModel.Store.ProductModel](T1.ProductModel_ProductModelID, T1.ProductModel_Name, T1.ProductModel_CatalogDescription, T1.ProductModel_rowguid, T1.ProductModel_ModifiedDate)
    FROM (
        SELECT 
            T.ProductModelID AS ProductModel_ProductModelID, 
            T.Name AS ProductModel_Name, 
            T.CatalogDescription AS ProductModel_CatalogDescription, 
            T.rowguid AS ProductModel_rowguid, 
            T.ModifiedDate AS ProductModel_ModifiedDate, 
            True AS _from0
        FROM AWEntities.ProductModels AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.ProductModel", viewString.ToString());
            }
            if ((index == 9))
            {
                // return view for AWModelStoreContainer.ProductModelProductDescription
                viewString.Append(@"
    SELECT VALUE -- Constructing ProductModelProductDescription
        [AWModel.Store.ProductModelProductDescription](T1.ProductModelProductDescription_ProductModelID, T1.ProductModelProductDescription_ProductDescriptionID, T1.ProductModelProductDescription_Culture, T1.ProductModelProductDescription_rowguid, T1.ProductModelProductDescription_ModifiedDate)
    FROM (
        SELECT 
            T.ProductModelID AS ProductModelProductDescription_ProductModelID, 
            T.ProductDescriptionID AS ProductModelProductDescription_ProductDescriptionID, 
            T.Culture AS ProductModelProductDescription_Culture, 
            T.rowguid AS ProductModelProductDescription_rowguid, 
            T.ModifiedDate AS ProductModelProductDescription_ModifiedDate, 
            True AS _from0
        FROM AWEntities.ProductModelProductDescriptions AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.ProductModelProductDescription", viewString.ToString());
            }
            if ((index == 10))
            {
                // return view for AWEntities.AWCustomers
                viewString.Append(@"
    SELECT VALUE -- Constructing AWCustomers
        [AWModel.AWCustomer](T1.AWCustomer_CustomerID, T1.AWCustomer_NameStyle, T1.AWCustomer_Title, T1.AWCustomer_FirstName, T1.AWCustomer_MiddleName, T1.AWCustomer_LastName, T1.AWCustomer_Suffix, T1.AWCustomer_CompanyName, T1.AWCustomer_SalesPerson, T1.AWCustomer_EmailAddress, T1.AWCustomer_Phone, T1.AWCustomer_PasswordHash, T1.AWCustomer_PasswordSalt, T1.AWCustomer_rowguid, T1.AWCustomer_ModifiedDate)
    FROM (
        SELECT 
            T.CustomerID AS AWCustomer_CustomerID, 
            T.NameStyle AS AWCustomer_NameStyle, 
            T.Title AS AWCustomer_Title, 
            T.FirstName AS AWCustomer_FirstName, 
            T.MiddleName AS AWCustomer_MiddleName, 
            T.LastName AS AWCustomer_LastName, 
            T.Suffix AS AWCustomer_Suffix, 
            T.CompanyName AS AWCustomer_CompanyName, 
            T.SalesPerson AS AWCustomer_SalesPerson, 
            T.EmailAddress AS AWCustomer_EmailAddress, 
            T.Phone AS AWCustomer_Phone, 
            T.PasswordHash AS AWCustomer_PasswordHash, 
            T.PasswordSalt AS AWCustomer_PasswordSalt, 
            T.rowguid AS AWCustomer_rowguid, 
            T.ModifiedDate AS AWCustomer_ModifiedDate, 
            True AS _from0
        FROM AWModelStoreContainer.Customer AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.AWCustomers", viewString.ToString());
            }
            if ((index == 11))
            {
                // return view for AWEntities.SalesOrderDetails
                viewString.Append(@"
    SELECT VALUE -- Constructing SalesOrderDetails
        [AWModel.SalesOrderDetail](T1.SalesOrderDetail_SalesOrderID, T1.SalesOrderDetail_SalesOrderDetailID, T1.SalesOrderDetail_OrderQty, T1.SalesOrderDetail_ProductID, T1.SalesOrderDetail_UnitPrice, T1.SalesOrderDetail_UnitPriceDiscount, T1.SalesOrderDetail_LineTotal, T1.SalesOrderDetail_rowguid, T1.SalesOrderDetail_ModifiedDate)
    FROM (
        SELECT 
            T.SalesOrderID AS SalesOrderDetail_SalesOrderID, 
            T.SalesOrderDetailID AS SalesOrderDetail_SalesOrderDetailID, 
            T.OrderQty AS SalesOrderDetail_OrderQty, 
            T.ProductID AS SalesOrderDetail_ProductID, 
            T.UnitPrice AS SalesOrderDetail_UnitPrice, 
            T.UnitPriceDiscount AS SalesOrderDetail_UnitPriceDiscount, 
            T.LineTotal AS SalesOrderDetail_LineTotal, 
            T.rowguid AS SalesOrderDetail_rowguid, 
            T.ModifiedDate AS SalesOrderDetail_ModifiedDate, 
            True AS _from0
        FROM AWModelStoreContainer.SalesOrderDetail AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.SalesOrderDetails", viewString.ToString());
            }
            if ((index == 12))
            {
                // return view for AWEntities.SalesOrderHeaders
                viewString.Append("\r\n    SELECT VALUE -- Constructing SalesOrderHeaders\r\n        [AWModel.SalesOrde");
                viewString.Append("rHeader](T1.SalesOrderHeader_SalesOrderID, T1.SalesOrderHeader_RevisionNumber, T");
                viewString.Append("1.SalesOrderHeader_OrderDate, T1.SalesOrderHeader_DueDate, T1.SalesOrderHeader_S");
                viewString.Append("hipDate, T1.SalesOrderHeader_Status, T1.SalesOrderHeader_OnlineOrderFlag, T1.Sal");
                viewString.Append("esOrderHeader_SalesOrderNumber, T1.SalesOrderHeader_PurchaseOrderNumber, T1.Sale");
                viewString.Append("sOrderHeader_AccountNumber, T1.SalesOrderHeader_CustomerID, T1.SalesOrderHeader_");
                viewString.Append("ShipToAddressID, T1.SalesOrderHeader_BillToAddressID, T1.SalesOrderHeader_ShipMe");
                viewString.Append("thod, T1.SalesOrderHeader_CreditCardApprovalCode, T1.SalesOrderHeader_SubTotal, ");
                viewString.Append("T1.SalesOrderHeader_TaxAmt, T1.SalesOrderHeader_Freight, T1.SalesOrderHeader_Tot");
                viewString.Append("alDue, T1.SalesOrderHeader_Comment, T1.SalesOrderHeader_rowguid, T1.SalesOrderHe");
                viewString.Append("ader_ModifiedDate)\r\n    FROM (\r\n        SELECT \r\n            T.SalesOrderID AS S");
                viewString.Append("alesOrderHeader_SalesOrderID, \r\n            T.RevisionNumber AS SalesOrderHeader");
                viewString.Append("_RevisionNumber, \r\n            T.OrderDate AS SalesOrderHeader_OrderDate, \r\n    ");
                viewString.Append("        T.DueDate AS SalesOrderHeader_DueDate, \r\n            T.ShipDate AS Sales");
                viewString.Append("OrderHeader_ShipDate, \r\n            T.Status AS SalesOrderHeader_Status, \r\n     ");
                viewString.Append("       T.OnlineOrderFlag AS SalesOrderHeader_OnlineOrderFlag, \r\n            T.Sa");
                viewString.Append("lesOrderNumber AS SalesOrderHeader_SalesOrderNumber, \r\n            T.PurchaseOrd");
                viewString.Append("erNumber AS SalesOrderHeader_PurchaseOrderNumber, \r\n            T.AccountNumber ");
                viewString.Append("AS SalesOrderHeader_AccountNumber, \r\n            T.CustomerID AS SalesOrderHeade");
                viewString.Append("r_CustomerID, \r\n            T.ShipToAddressID AS SalesOrderHeader_ShipToAddressI");
                viewString.Append("D, \r\n            T.BillToAddressID AS SalesOrderHeader_BillToAddressID, \r\n      ");
                viewString.Append("      T.ShipMethod AS SalesOrderHeader_ShipMethod, \r\n            T.CreditCardApp");
                viewString.Append("rovalCode AS SalesOrderHeader_CreditCardApprovalCode, \r\n            T.SubTotal A");
                viewString.Append("S SalesOrderHeader_SubTotal, \r\n            T.TaxAmt AS SalesOrderHeader_TaxAmt, ");
                viewString.Append("\r\n            T.Freight AS SalesOrderHeader_Freight, \r\n            T.TotalDue AS");
                viewString.Append(" SalesOrderHeader_TotalDue, \r\n            T.Comment AS SalesOrderHeader_Comment,");
                viewString.Append(" \r\n            T.rowguid AS SalesOrderHeader_rowguid, \r\n            T.ModifiedDa");
                viewString.Append("te AS SalesOrderHeader_ModifiedDate, \r\n            True AS _from0\r\n        FROM ");
                viewString.Append("AWModelStoreContainer.SalesOrderHeader AS T\r\n    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.SalesOrderHeaders", viewString.ToString());
            }
            if ((index == 13))
            {
                // return view for AWEntities.Addresses
                viewString.Append(@"
    SELECT VALUE -- Constructing Addresses
        [AWModel.Address](T1.Address_AddressID, T1.Address_AddressLine1, T1.Address_AddressLine2, T1.Address_City, T1.Address_StateProvince, T1.Address_CountryRegion, T1.Address_PostalCode, T1.Address_rowguid, T1.Address_ModifiedDate)
    FROM (
        SELECT 
            T.AddressID AS Address_AddressID, 
            T.AddressLine1 AS Address_AddressLine1, 
            T.AddressLine2 AS Address_AddressLine2, 
            T.City AS Address_City, 
            T.StateProvince AS Address_StateProvince, 
            T.CountryRegion AS Address_CountryRegion, 
            T.PostalCode AS Address_PostalCode, 
            T.rowguid AS Address_rowguid, 
            T.ModifiedDate AS Address_ModifiedDate, 
            True AS _from0
        FROM AWModelStoreContainer.Address AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.Addresses", viewString.ToString());
            }
            if ((index == 14))
            {
                // return view for AWEntities.CustomerAddresses
                viewString.Append(@"
    SELECT VALUE -- Constructing CustomerAddresses
        [AWModel.CustomerAddress](T1.CustomerAddress_CustomerID, T1.CustomerAddress_AddressID, T1.CustomerAddress_AddressType, T1.CustomerAddress_rowguid, T1.CustomerAddress_ModifiedDate)
    FROM (
        SELECT 
            T.CustomerID AS CustomerAddress_CustomerID, 
            T.AddressID AS CustomerAddress_AddressID, 
            T.AddressType AS CustomerAddress_AddressType, 
            T.rowguid AS CustomerAddress_rowguid, 
            T.ModifiedDate AS CustomerAddress_ModifiedDate, 
            True AS _from0
        FROM AWModelStoreContainer.CustomerAddress AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.CustomerAddresses", viewString.ToString());
            }
            if ((index == 15))
            {
                // return view for AWEntities.Products
                viewString.Append(@"
    SELECT VALUE -- Constructing Products
        [AWModel.Product](T1.Product_ProductID, T1.Product_Name, T1.Product_ProductNumber, T1.Product_Color, T1.Product_StandardCost, T1.Product_ListPrice, T1.Product_Size, T1.Product_Weight, T1.Product_ProductCategoryID, T1.Product_ProductModelID, T1.Product_SellStartDate, T1.Product_SellEndDate, T1.Product_DiscontinuedDate, T1.Product_ThumbNailPhoto, T1.Product_ThumbnailPhotoFileName, T1.Product_rowguid, T1.Product_ModifiedDate)
    FROM (
        SELECT 
            T.ProductID AS Product_ProductID, 
            T.Name AS Product_Name, 
            T.ProductNumber AS Product_ProductNumber, 
            T.Color AS Product_Color, 
            T.StandardCost AS Product_StandardCost, 
            T.ListPrice AS Product_ListPrice, 
            T.Size AS Product_Size, 
            T.Weight AS Product_Weight, 
            T.ProductCategoryID AS Product_ProductCategoryID, 
            T.ProductModelID AS Product_ProductModelID, 
            T.SellStartDate AS Product_SellStartDate, 
            T.SellEndDate AS Product_SellEndDate, 
            T.DiscontinuedDate AS Product_DiscontinuedDate, 
            T.ThumbNailPhoto AS Product_ThumbNailPhoto, 
            T.ThumbnailPhotoFileName AS Product_ThumbnailPhotoFileName, 
            T.rowguid AS Product_rowguid, 
            T.ModifiedDate AS Product_ModifiedDate, 
            True AS _from0
        FROM AWModelStoreContainer.Product AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.Products", viewString.ToString());
            }
            if ((index == 16))
            {
                // return view for AWEntities.ProductCategories
                viewString.Append(@"
    SELECT VALUE -- Constructing ProductCategories
        [AWModel.ProductCategory](T1.ProductCategory_ProductCategoryID, T1.ProductCategory_ParentProductCategoryID, T1.ProductCategory_Name, T1.ProductCategory_rowguid, T1.ProductCategory_ModifiedDate)
    FROM (
        SELECT 
            T.ProductCategoryID AS ProductCategory_ProductCategoryID, 
            T.ParentProductCategoryID AS ProductCategory_ParentProductCategoryID, 
            T.Name AS ProductCategory_Name, 
            T.rowguid AS ProductCategory_rowguid, 
            T.ModifiedDate AS ProductCategory_ModifiedDate, 
            True AS _from0
        FROM AWModelStoreContainer.ProductCategory AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.ProductCategories", viewString.ToString());
            }
            if ((index == 17))
            {
                // return view for AWEntities.ProductDescriptions
                viewString.Append(@"
    SELECT VALUE -- Constructing ProductDescriptions
        [AWModel.ProductDescription](T1.ProductDescription_ProductDescriptionID, T1.ProductDescription_Description, T1.ProductDescription_rowguid, T1.ProductDescription_ModifiedDate)
    FROM (
        SELECT 
            T.ProductDescriptionID AS ProductDescription_ProductDescriptionID, 
            T.Description AS ProductDescription_Description, 
            T.rowguid AS ProductDescription_rowguid, 
            T.ModifiedDate AS ProductDescription_ModifiedDate, 
            True AS _from0
        FROM AWModelStoreContainer.ProductDescription AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.ProductDescriptions", viewString.ToString());
            }
            if ((index == 18))
            {
                // return view for AWEntities.ProductModels
                viewString.Append(@"
    SELECT VALUE -- Constructing ProductModels
        [AWModel.ProductModel](T1.ProductModel_ProductModelID, T1.ProductModel_Name, T1.ProductModel_CatalogDescription, T1.ProductModel_rowguid, T1.ProductModel_ModifiedDate)
    FROM (
        SELECT 
            T.ProductModelID AS ProductModel_ProductModelID, 
            T.Name AS ProductModel_Name, 
            T.CatalogDescription AS ProductModel_CatalogDescription, 
            T.rowguid AS ProductModel_rowguid, 
            T.ModifiedDate AS ProductModel_ModifiedDate, 
            True AS _from0
        FROM AWModelStoreContainer.ProductModel AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.ProductModels", viewString.ToString());
            }
            if ((index == 19))
            {
                // return view for AWEntities.ProductModelProductDescriptions
                viewString.Append(@"
    SELECT VALUE -- Constructing ProductModelProductDescriptions
        [AWModel.ProductModelProductDescription](T1.ProductModelProductDescription_ProductModelID, T1.ProductModelProductDescription_ProductDescriptionID, T1.ProductModelProductDescription_Culture, T1.ProductModelProductDescription_rowguid, T1.ProductModelProductDescription_ModifiedDate)
    FROM (
        SELECT 
            T.ProductModelID AS ProductModelProductDescription_ProductModelID, 
            T.ProductDescriptionID AS ProductModelProductDescription_ProductDescriptionID, 
            T.Culture AS ProductModelProductDescription_Culture, 
            T.rowguid AS ProductModelProductDescription_rowguid, 
            T.ModifiedDate AS ProductModelProductDescription_ModifiedDate, 
            True AS _from0
        FROM AWModelStoreContainer.ProductModelProductDescription AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.ProductModelProductDescriptions", viewString.ToString());
            }
            if ((index == 20))
            {
                // return view for AWModelStoreContainer.BuildVersion
                viewString.Append(@"
    SELECT VALUE -- Constructing BuildVersion
        [AWModel.Store.BuildVersion](T1.BuildVersion_SystemInformationID, T1.[BuildVersion_Database Version], T1.BuildVersion_VersionDate, T1.BuildVersion_ModifiedDate)
    FROM (
        SELECT 
            T.SystemInformationID AS BuildVersion_SystemInformationID, 
            T.Database_Version AS [BuildVersion_Database Version], 
            T.VersionDate AS BuildVersion_VersionDate, 
            T.ModifiedDate AS BuildVersion_ModifiedDate, 
            True AS _from0
        FROM AWEntities.BuildVersions AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.BuildVersion", viewString.ToString());
            }
            if ((index == 21))
            {
                // return view for AWEntities.BuildVersions
                viewString.Append(@"
    SELECT VALUE -- Constructing BuildVersions
        [AWModel.BuildVersion](T1.BuildVersion_SystemInformationID, T1.[BuildVersion.Database_Version], T1.BuildVersion_VersionDate, T1.BuildVersion_ModifiedDate)
    FROM (
        SELECT 
            T.SystemInformationID AS BuildVersion_SystemInformationID, 
            T.[Database Version] AS [BuildVersion.Database_Version], 
            T.VersionDate AS BuildVersion_VersionDate, 
            T.ModifiedDate AS BuildVersion_ModifiedDate, 
            True AS _from0
        FROM AWModelStoreContainer.BuildVersion AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.BuildVersions", viewString.ToString());
            }
            if ((index == 22))
            {
                // return view for AWModelStoreContainer.ErrorLog
                viewString.Append(@"
    SELECT VALUE -- Constructing ErrorLog
        [AWModel.Store.ErrorLog](T1.ErrorLog_ErrorLogID, T1.ErrorLog_ErrorTime, T1.ErrorLog_UserName, T1.ErrorLog_ErrorNumber, T1.ErrorLog_ErrorSeverity, T1.ErrorLog_ErrorState, T1.ErrorLog_ErrorProcedure, T1.ErrorLog_ErrorLine, T1.ErrorLog_ErrorMessage)
    FROM (
        SELECT 
            T.ErrorLogID AS ErrorLog_ErrorLogID, 
            T.ErrorTime AS ErrorLog_ErrorTime, 
            T.UserName AS ErrorLog_UserName, 
            T.ErrorNumber AS ErrorLog_ErrorNumber, 
            T.ErrorSeverity AS ErrorLog_ErrorSeverity, 
            T.ErrorState AS ErrorLog_ErrorState, 
            T.ErrorProcedure AS ErrorLog_ErrorProcedure, 
            T.ErrorLine AS ErrorLog_ErrorLine, 
            T.ErrorMessage AS ErrorLog_ErrorMessage, 
            True AS _from0
        FROM AWEntities.ErrorLogs AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.ErrorLog", viewString.ToString());
            }
            if ((index == 23))
            {
                // return view for AWEntities.ErrorLogs
                viewString.Append(@"
    SELECT VALUE -- Constructing ErrorLogs
        [AWModel.ErrorLog](T1.ErrorLog_ErrorLogID, T1.ErrorLog_ErrorTime, T1.ErrorLog_UserName, T1.ErrorLog_ErrorNumber, T1.ErrorLog_ErrorSeverity, T1.ErrorLog_ErrorState, T1.ErrorLog_ErrorProcedure, T1.ErrorLog_ErrorLine, T1.ErrorLog_ErrorMessage)
    FROM (
        SELECT 
            T.ErrorLogID AS ErrorLog_ErrorLogID, 
            T.ErrorTime AS ErrorLog_ErrorTime, 
            T.UserName AS ErrorLog_UserName, 
            T.ErrorNumber AS ErrorLog_ErrorNumber, 
            T.ErrorSeverity AS ErrorLog_ErrorSeverity, 
            T.ErrorState AS ErrorLog_ErrorState, 
            T.ErrorProcedure AS ErrorLog_ErrorProcedure, 
            T.ErrorLine AS ErrorLog_ErrorLine, 
            T.ErrorMessage AS ErrorLog_ErrorMessage, 
            True AS _from0
        FROM AWModelStoreContainer.ErrorLog AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.ErrorLogs", viewString.ToString());
            }
            if ((index == 24))
            {
                // return view for AWModelStoreContainer.sysdiagrams
                viewString.Append(@"
    SELECT VALUE -- Constructing sysdiagrams
        [AWModel.Store.sysdiagrams](T1.sysdiagrams_name, T1.[sysdiagrams.principal_id], T1.[sysdiagrams.diagram_id], T1.sysdiagrams_version, T1.sysdiagrams_definition)
    FROM (
        SELECT 
            T.name AS sysdiagrams_name, 
            T.principal_id AS [sysdiagrams.principal_id], 
            T.diagram_id AS [sysdiagrams.diagram_id], 
            T.version AS sysdiagrams_version, 
            T.definition AS sysdiagrams_definition, 
            True AS _from0
        FROM AWEntities.sysdiagrams AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.sysdiagrams", viewString.ToString());
            }
            if ((index == 25))
            {
                // return view for AWEntities.sysdiagrams
                viewString.Append(@"
    SELECT VALUE -- Constructing sysdiagrams
        [AWModel.sysdiagram](T1.sysdiagram_name, T1.[sysdiagram.principal_id], T1.[sysdiagram.diagram_id], T1.sysdiagram_version, T1.sysdiagram_definition)
    FROM (
        SELECT 
            T.name AS sysdiagram_name, 
            T.principal_id AS [sysdiagram.principal_id], 
            T.diagram_id AS [sysdiagram.diagram_id], 
            T.version AS sysdiagram_version, 
            T.definition AS sysdiagram_definition, 
            True AS _from0
        FROM AWModelStoreContainer.sysdiagrams AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.sysdiagrams", viewString.ToString());
            }
            if ((index == 26))
            {
                // return view for AWModelStoreContainer.vGetAllCategories
                viewString.Append(@"
    SELECT VALUE -- Constructing vGetAllCategories
        [AWModel.Store.vGetAllCategories](T1.vGetAllCategories_ParentProductCategoryName, T1.vGetAllCategories_ProductCategoryName, T1.vGetAllCategories_ProductCategoryID)
    FROM (
        SELECT 
            T.ParentProductCategoryName AS vGetAllCategories_ParentProductCategoryName, 
            T.ProductCategoryName AS vGetAllCategories_ProductCategoryName, 
            T.ProductCategoryID AS vGetAllCategories_ProductCategoryID, 
            True AS _from0
        FROM AWEntities.vGetAllCategories AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.vGetAllCategories", viewString.ToString());
            }
            if ((index == 27))
            {
                // return view for AWEntities.vGetAllCategories
                viewString.Append(@"
    SELECT VALUE -- Constructing vGetAllCategories
        [AWModel.vGetAllCategory](T1.vGetAllCategory_ParentProductCategoryName, T1.vGetAllCategory_ProductCategoryName, T1.vGetAllCategory_ProductCategoryID)
    FROM (
        SELECT 
            T.ParentProductCategoryName AS vGetAllCategory_ParentProductCategoryName, 
            T.ProductCategoryName AS vGetAllCategory_ProductCategoryName, 
            T.ProductCategoryID AS vGetAllCategory_ProductCategoryID, 
            True AS _from0
        FROM AWModelStoreContainer.vGetAllCategories AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.vGetAllCategories", viewString.ToString());
            }
            if ((index == 28))
            {
                // return view for AWModelStoreContainer.vProductAndDescription
                viewString.Append(@"
    SELECT VALUE -- Constructing vProductAndDescription
        [AWModel.Store.vProductAndDescription](T1.vProductAndDescription_ProductID, T1.vProductAndDescription_Name, T1.vProductAndDescription_ProductModel, T1.vProductAndDescription_Culture, T1.vProductAndDescription_Description)
    FROM (
        SELECT 
            T.ProductID AS vProductAndDescription_ProductID, 
            T.Name AS vProductAndDescription_Name, 
            T.ProductModel AS vProductAndDescription_ProductModel, 
            T.Culture AS vProductAndDescription_Culture, 
            T.Description AS vProductAndDescription_Description, 
            True AS _from0
        FROM AWEntities.vProductAndDescriptions AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.vProductAndDescription", viewString.ToString());
            }
            if ((index == 29))
            {
                // return view for AWEntities.vProductAndDescriptions
                viewString.Append(@"
    SELECT VALUE -- Constructing vProductAndDescriptions
        [AWModel.vProductAndDescription](T1.vProductAndDescription_ProductID, T1.vProductAndDescription_Name, T1.vProductAndDescription_ProductModel, T1.vProductAndDescription_Culture, T1.vProductAndDescription_Description)
    FROM (
        SELECT 
            T.ProductID AS vProductAndDescription_ProductID, 
            T.Name AS vProductAndDescription_Name, 
            T.ProductModel AS vProductAndDescription_ProductModel, 
            T.Culture AS vProductAndDescription_Culture, 
            T.Description AS vProductAndDescription_Description, 
            True AS _from0
        FROM AWModelStoreContainer.vProductAndDescription AS T
    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.vProductAndDescriptions", viewString.ToString());
            }
            if ((index == 30))
            {
                // return view for AWModelStoreContainer.vProductModelCatalogDescription
                viewString.Append("\r\n    SELECT VALUE -- Constructing vProductModelCatalogDescription\r\n        [AWM");
                viewString.Append("odel.Store.vProductModelCatalogDescription](T1.vProductModelCatalogDescription_P");
                viewString.Append("roductModelID, T1.vProductModelCatalogDescription_Name, T1.vProductModelCatalogD");
                viewString.Append("escription_Summary, T1.vProductModelCatalogDescription_Manufacturer, T1.vProduct");
                viewString.Append("ModelCatalogDescription_Copyright, T1.vProductModelCatalogDescription_ProductURL");
                viewString.Append(", T1.vProductModelCatalogDescription_WarrantyPeriod, T1.vProductModelCatalogDesc");
                viewString.Append("ription_WarrantyDescription, T1.vProductModelCatalogDescription_NoOfYears, T1.vP");
                viewString.Append("roductModelCatalogDescription_MaintenanceDescription, T1.vProductModelCatalogDes");
                viewString.Append("cription_Wheel, T1.vProductModelCatalogDescription_Saddle, T1.vProductModelCatal");
                viewString.Append("ogDescription_Pedal, T1.vProductModelCatalogDescription_BikeFrame, T1.vProductMo");
                viewString.Append("delCatalogDescription_Crankset, T1.vProductModelCatalogDescription_PictureAngle,");
                viewString.Append(" T1.vProductModelCatalogDescription_PictureSize, T1.vProductModelCatalogDescript");
                viewString.Append("ion_ProductPhotoID, T1.vProductModelCatalogDescription_Material, T1.vProductMode");
                viewString.Append("lCatalogDescription_Color, T1.vProductModelCatalogDescription_ProductLine, T1.vP");
                viewString.Append("roductModelCatalogDescription_Style, T1.vProductModelCatalogDescription_RiderExp");
                viewString.Append("erience, T1.vProductModelCatalogDescription_rowguid, T1.vProductModelCatalogDesc");
                viewString.Append("ription_ModifiedDate)\r\n    FROM (\r\n        SELECT \r\n            T.ProductModelID");
                viewString.Append(" AS vProductModelCatalogDescription_ProductModelID, \r\n            T.Name AS vPro");
                viewString.Append("ductModelCatalogDescription_Name, \r\n            T.Summary AS vProductModelCatalo");
                viewString.Append("gDescription_Summary, \r\n            T.Manufacturer AS vProductModelCatalogDescri");
                viewString.Append("ption_Manufacturer, \r\n            T.Copyright AS vProductModelCatalogDescription");
                viewString.Append("_Copyright, \r\n            T.ProductURL AS vProductModelCatalogDescription_Produc");
                viewString.Append("tURL, \r\n            T.WarrantyPeriod AS vProductModelCatalogDescription_Warranty");
                viewString.Append("Period, \r\n            T.WarrantyDescription AS vProductModelCatalogDescription_W");
                viewString.Append("arrantyDescription, \r\n            T.NoOfYears AS vProductModelCatalogDescription");
                viewString.Append("_NoOfYears, \r\n            T.MaintenanceDescription AS vProductModelCatalogDescri");
                viewString.Append("ption_MaintenanceDescription, \r\n            T.Wheel AS vProductModelCatalogDescr");
                viewString.Append("iption_Wheel, \r\n            T.Saddle AS vProductModelCatalogDescription_Saddle, ");
                viewString.Append("\r\n            T.Pedal AS vProductModelCatalogDescription_Pedal, \r\n            T.");
                viewString.Append("BikeFrame AS vProductModelCatalogDescription_BikeFrame, \r\n            T.Crankset");
                viewString.Append(" AS vProductModelCatalogDescription_Crankset, \r\n            T.PictureAngle AS vP");
                viewString.Append("roductModelCatalogDescription_PictureAngle, \r\n            T.PictureSize AS vProd");
                viewString.Append("uctModelCatalogDescription_PictureSize, \r\n            T.ProductPhotoID AS vProdu");
                viewString.Append("ctModelCatalogDescription_ProductPhotoID, \r\n            T.Material AS vProductMo");
                viewString.Append("delCatalogDescription_Material, \r\n            T.Color AS vProductModelCatalogDes");
                viewString.Append("cription_Color, \r\n            T.ProductLine AS vProductModelCatalogDescription_P");
                viewString.Append("roductLine, \r\n            T.Style AS vProductModelCatalogDescription_Style, \r\n  ");
                viewString.Append("          T.RiderExperience AS vProductModelCatalogDescription_RiderExperience, ");
                viewString.Append("\r\n            T.rowguid AS vProductModelCatalogDescription_rowguid, \r\n          ");
                viewString.Append("  T.ModifiedDate AS vProductModelCatalogDescription_ModifiedDate, \r\n            ");
                viewString.Append("True AS _from0\r\n        FROM AWEntities.vProductModelCatalogDescriptions AS T\r\n ");
                viewString.Append("   ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWModelStoreContainer.vProductModelCatalogDescription", viewString.ToString());
            }
            if ((index == 31))
            {
                // return view for AWEntities.vProductModelCatalogDescriptions
                viewString.Append("\r\n    SELECT VALUE -- Constructing vProductModelCatalogDescriptions\r\n        [AW");
                viewString.Append("Model.vProductModelCatalogDescription](T1.vProductModelCatalogDescription_Produc");
                viewString.Append("tModelID, T1.vProductModelCatalogDescription_Name, T1.vProductModelCatalogDescri");
                viewString.Append("ption_Summary, T1.vProductModelCatalogDescription_Manufacturer, T1.vProductModel");
                viewString.Append("CatalogDescription_Copyright, T1.vProductModelCatalogDescription_ProductURL, T1.");
                viewString.Append("vProductModelCatalogDescription_WarrantyPeriod, T1.vProductModelCatalogDescripti");
                viewString.Append("on_WarrantyDescription, T1.vProductModelCatalogDescription_NoOfYears, T1.vProduc");
                viewString.Append("tModelCatalogDescription_MaintenanceDescription, T1.vProductModelCatalogDescript");
                viewString.Append("ion_Wheel, T1.vProductModelCatalogDescription_Saddle, T1.vProductModelCatalogDes");
                viewString.Append("cription_Pedal, T1.vProductModelCatalogDescription_BikeFrame, T1.vProductModelCa");
                viewString.Append("talogDescription_Crankset, T1.vProductModelCatalogDescription_PictureAngle, T1.v");
                viewString.Append("ProductModelCatalogDescription_PictureSize, T1.vProductModelCatalogDescription_P");
                viewString.Append("roductPhotoID, T1.vProductModelCatalogDescription_Material, T1.vProductModelCata");
                viewString.Append("logDescription_Color, T1.vProductModelCatalogDescription_ProductLine, T1.vProduc");
                viewString.Append("tModelCatalogDescription_Style, T1.vProductModelCatalogDescription_RiderExperien");
                viewString.Append("ce, T1.vProductModelCatalogDescription_rowguid, T1.vProductModelCatalogDescripti");
                viewString.Append("on_ModifiedDate)\r\n    FROM (\r\n        SELECT \r\n            T.ProductModelID AS v");
                viewString.Append("ProductModelCatalogDescription_ProductModelID, \r\n            T.Name AS vProductM");
                viewString.Append("odelCatalogDescription_Name, \r\n            T.Summary AS vProductModelCatalogDesc");
                viewString.Append("ription_Summary, \r\n            T.Manufacturer AS vProductModelCatalogDescription");
                viewString.Append("_Manufacturer, \r\n            T.Copyright AS vProductModelCatalogDescription_Copy");
                viewString.Append("right, \r\n            T.ProductURL AS vProductModelCatalogDescription_ProductURL,");
                viewString.Append(" \r\n            T.WarrantyPeriod AS vProductModelCatalogDescription_WarrantyPerio");
                viewString.Append("d, \r\n            T.WarrantyDescription AS vProductModelCatalogDescription_Warran");
                viewString.Append("tyDescription, \r\n            T.NoOfYears AS vProductModelCatalogDescription_NoOf");
                viewString.Append("Years, \r\n            T.MaintenanceDescription AS vProductModelCatalogDescription");
                viewString.Append("_MaintenanceDescription, \r\n            T.Wheel AS vProductModelCatalogDescriptio");
                viewString.Append("n_Wheel, \r\n            T.Saddle AS vProductModelCatalogDescription_Saddle, \r\n   ");
                viewString.Append("         T.Pedal AS vProductModelCatalogDescription_Pedal, \r\n            T.BikeF");
                viewString.Append("rame AS vProductModelCatalogDescription_BikeFrame, \r\n            T.Crankset AS v");
                viewString.Append("ProductModelCatalogDescription_Crankset, \r\n            T.PictureAngle AS vProduc");
                viewString.Append("tModelCatalogDescription_PictureAngle, \r\n            T.PictureSize AS vProductMo");
                viewString.Append("delCatalogDescription_PictureSize, \r\n            T.ProductPhotoID AS vProductMod");
                viewString.Append("elCatalogDescription_ProductPhotoID, \r\n            T.Material AS vProductModelCa");
                viewString.Append("talogDescription_Material, \r\n            T.Color AS vProductModelCatalogDescript");
                viewString.Append("ion_Color, \r\n            T.ProductLine AS vProductModelCatalogDescription_Produc");
                viewString.Append("tLine, \r\n            T.Style AS vProductModelCatalogDescription_Style, \r\n       ");
                viewString.Append("     T.RiderExperience AS vProductModelCatalogDescription_RiderExperience, \r\n   ");
                viewString.Append("         T.rowguid AS vProductModelCatalogDescription_rowguid, \r\n            T.M");
                viewString.Append("odifiedDate AS vProductModelCatalogDescription_ModifiedDate, \r\n            True ");
                viewString.Append("AS _from0\r\n        FROM AWModelStoreContainer.vProductModelCatalogDescription AS");
                viewString.Append(" T\r\n    ) AS T1");
                return new System.Collections.Generic.KeyValuePair<string, string>("AWEntities.vProductModelCatalogDescriptions", viewString.ToString());
            }
            throw new System.IndexOutOfRangeException();
        }
    }
}
