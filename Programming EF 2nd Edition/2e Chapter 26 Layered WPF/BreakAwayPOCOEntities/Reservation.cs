//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace BAGA
{
    	[Serializable()]
        [DataContractAttribute(IsReference=true)]
    public partial class Reservation : POCO.State.StateObject
    {
        #region Primitive Properties
        [DataMember]
         public int ReservationID
        {
    	        get;
    		set;
    	
        }
        [DataMember]
         public System.DateTime ReservationDate
        {
    	        get;
    		set;
    	
        }
        [DataMember]
         public int ContactID
        {
            get { return _contactID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_contactID != value)
                    {
                        if (Customer != null && Customer.ContactID != value)
                        {
                            Customer = null;
                        }
                        _contactID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _contactID;
        [DataMember]
         public Nullable<int> TripID
        {
            get { return _tripID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_tripID != value)
                    {
                        if (Trip != null && Trip.TripID != value)
                        {
                            Trip = null;
                        }
                        _tripID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _tripID;
        [DataMember]
         public byte[] RowVersion
        {
    		   get{return _rowVersion;} 
    			set
     				{
      				{ _rowVersion = value;}
    				}
    
    	
        }
        private byte[] _rowVersion;

        #endregion
        #region Navigation Properties
    
        [DataMember]
    	public Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                   // var previousValue = _customer;
                    _customer = value;
                 //   FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
        [DataMember]
    	public Trip Trip
        {
            get { return _trip; }
            set
            {
                if (!ReferenceEquals(_trip, value))
                {
                   // var previousValue = _trip;
                    _trip = value;
                 //   FixupTrip(previousValue);
                }
            }
        }
        private Trip _trip;
    
        [DataMember]
    	public FixupCollection<Payment> Payments
        {
            get
            {
                if (_payments == null)
                {
                    var newCollection = new FixupCollection<Payment>();
                    newCollection.CollectionChanged += FixupPayments;
                    _payments = newCollection;
                }
                return _payments;
            }
            set
            {
                if (!ReferenceEquals(_payments, value))
                {
                    var previousValue = _payments as FixupCollection<Payment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPayments;
                    }
                    _payments = value;
                    var newValue = value as FixupCollection<Payment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPayments;
                    }
                }
            }
        }
        private FixupCollection<Payment> _payments;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.Reservations.Contains(this))
            {
                previousValue.Reservations.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Reservations.Contains(this))
                {
                    Customer.Reservations.Add(this);
                }
                if (ContactID != Customer.ContactID)
                {
                    ContactID = Customer.ContactID;
                }
            }
        }
    
        private void FixupTrip(Trip previousValue)
        {
            if (previousValue != null && previousValue.Reservations.Contains(this))
            {
                previousValue.Reservations.Remove(this);
            }
    
            if (Trip != null)
            {
                if (!Trip.Reservations.Contains(this))
                {
                    Trip.Reservations.Add(this);
                }
                if (TripID != Trip.TripID)
                {
                    TripID = Trip.TripID;
                }
            }
            else if (!_settingFK)
            {
                TripID = null;
            }
        }
    
        private void FixupPayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Payment item in e.NewItems)
                {
                    item.Reservation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Payment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Reservation, this))
                    {
                        item.Reservation = null;
                    }
                }
            }
        }

        #endregion
    }
}
