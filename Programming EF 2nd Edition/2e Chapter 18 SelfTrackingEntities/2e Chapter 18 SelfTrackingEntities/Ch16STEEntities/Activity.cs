//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace BAGA
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Customer))]
    [KnownType(typeof(Equipment))]
    [KnownType(typeof(Trip))]
    public partial class Activity: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ActivityID
        {
            get { return _activityID; }
            set
            {
                if (_activityID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ActivityID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _activityID = value;
                    OnPropertyChanged("ActivityID");
                }
            }
        }
        private int _activityID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string imagepath
        {
            get { return _imagepath; }
            set
            {
                if (_imagepath != value)
                {
                    _imagepath = value;
                    OnPropertyChanged("imagepath");
                }
            }
        }
        private string _imagepath;
    
        [DataMember]
        public string Category
        {
            get { return _category; }
            set
            {
                if (_category != value)
                {
                    _category = value;
                    OnPropertyChanged("Category");
                }
            }
        }
        private string _category;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Customer> PrimaryPrefCustomers
        {
            get
            {
                if (_primaryPrefCustomers == null)
                {
                    _primaryPrefCustomers = new TrackableCollection<Customer>();
                    _primaryPrefCustomers.CollectionChanged += FixupPrimaryPrefCustomers;
                }
                return _primaryPrefCustomers;
            }
            set
            {
                if (!ReferenceEquals(_primaryPrefCustomers, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_primaryPrefCustomers != null)
                    {
                        _primaryPrefCustomers.CollectionChanged -= FixupPrimaryPrefCustomers;
                    }
                    _primaryPrefCustomers = value;
                    if (_primaryPrefCustomers != null)
                    {
                        _primaryPrefCustomers.CollectionChanged += FixupPrimaryPrefCustomers;
                    }
                    OnNavigationPropertyChanged("PrimaryPrefCustomers");
                }
            }
        }
        private TrackableCollection<Customer> _primaryPrefCustomers;
    
        [DataMember]
        public TrackableCollection<Customer> SecondaryPrefCustomers
        {
            get
            {
                if (_secondaryPrefCustomers == null)
                {
                    _secondaryPrefCustomers = new TrackableCollection<Customer>();
                    _secondaryPrefCustomers.CollectionChanged += FixupSecondaryPrefCustomers;
                }
                return _secondaryPrefCustomers;
            }
            set
            {
                if (!ReferenceEquals(_secondaryPrefCustomers, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_secondaryPrefCustomers != null)
                    {
                        _secondaryPrefCustomers.CollectionChanged -= FixupSecondaryPrefCustomers;
                    }
                    _secondaryPrefCustomers = value;
                    if (_secondaryPrefCustomers != null)
                    {
                        _secondaryPrefCustomers.CollectionChanged += FixupSecondaryPrefCustomers;
                    }
                    OnNavigationPropertyChanged("SecondaryPrefCustomers");
                }
            }
        }
        private TrackableCollection<Customer> _secondaryPrefCustomers;
    
        [DataMember]
        public TrackableCollection<Equipment> Equipments
        {
            get
            {
                if (_equipments == null)
                {
                    _equipments = new TrackableCollection<Equipment>();
                    _equipments.CollectionChanged += FixupEquipments;
                }
                return _equipments;
            }
            set
            {
                if (!ReferenceEquals(_equipments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_equipments != null)
                    {
                        _equipments.CollectionChanged -= FixupEquipments;
                    }
                    _equipments = value;
                    if (_equipments != null)
                    {
                        _equipments.CollectionChanged += FixupEquipments;
                    }
                    OnNavigationPropertyChanged("Equipments");
                }
            }
        }
        private TrackableCollection<Equipment> _equipments;
    
        [DataMember]
        public TrackableCollection<Trip> Trips
        {
            get
            {
                if (_trips == null)
                {
                    _trips = new TrackableCollection<Trip>();
                    _trips.CollectionChanged += FixupTrips;
                }
                return _trips;
            }
            set
            {
                if (!ReferenceEquals(_trips, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_trips != null)
                    {
                        _trips.CollectionChanged -= FixupTrips;
                    }
                    _trips = value;
                    if (_trips != null)
                    {
                        _trips.CollectionChanged += FixupTrips;
                    }
                    OnNavigationPropertyChanged("Trips");
                }
            }
        }
        private TrackableCollection<Trip> _trips;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PrimaryPrefCustomers.Clear();
            SecondaryPrefCustomers.Clear();
            Equipments.Clear();
            Trips.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupPrimaryPrefCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.PrimaryActivity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PrimaryPrefCustomers", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.PrimaryActivity, this))
                    {
                        item.PrimaryActivity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PrimaryPrefCustomers", item);
                    }
                }
            }
        }
    
        private void FixupSecondaryPrefCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.SecondaryActivity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SecondaryPrefCustomers", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.SecondaryActivity, this))
                    {
                        item.SecondaryActivity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SecondaryPrefCustomers", item);
                    }
                }
            }
        }
    
        private void FixupEquipments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Equipment item in e.NewItems)
                {
                    if (!item.Activities.Contains(this))
                    {
                        item.Activities.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Equipments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Equipment item in e.OldItems)
                {
                    if (item.Activities.Contains(this))
                    {
                        item.Activities.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Equipments", item);
                    }
                }
            }
        }
    
        private void FixupTrips(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Trip item in e.NewItems)
                {
                    if (!item.Activities.Contains(this))
                    {
                        item.Activities.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Trips", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Trip item in e.OldItems)
                {
                    if (item.Activities.Contains(this))
                    {
                        item.Activities.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Trips", item);
                    }
                }
            }
        }

        #endregion
    }
}
