//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace BAGA
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Contact))]
    public partial class Address: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int addressID
        {
            get { return _addressID; }
            set
            {
                if (_addressID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'addressID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _addressID = value;
                    OnPropertyChanged("addressID");
                }
            }
        }
        private int _addressID;
    
        [DataMember]
        public string CountryRegion
        {
            get { return _countryRegion; }
            set
            {
                if (_countryRegion != value)
                {
                    _countryRegion = value;
                    OnPropertyChanged("CountryRegion");
                }
            }
        }
        private string _countryRegion;
    
        [DataMember]
        public string PostalCode
        {
            get { return _postalCode; }
            set
            {
                if (_postalCode != value)
                {
                    _postalCode = value;
                    OnPropertyChanged("PostalCode");
                }
            }
        }
        private string _postalCode;
    
        [DataMember]
        public string AddressType
        {
            get { return _addressType; }
            set
            {
                if (_addressType != value)
                {
                    _addressType = value;
                    OnPropertyChanged("AddressType");
                }
            }
        }
        private string _addressType;
    
        [DataMember]
        public int ContactID
        {
            get { return _contactID; }
            set
            {
                if (_contactID != value)
                {
    //julie was here
                    ChangeTracker.RecordOriginalValue("ContactID", _contactID);
                    if (!IsDeserializing)
                    {
                        if (Contact != null && Contact.ContactID != value)
                        {
                            Contact = null;
                        }
                    }
                    _contactID = value;
                    OnPropertyChanged("ContactID");
                }
            }
        }
        private int _contactID;
    
        [DataMember]
        public System.DateTime ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    _modifiedDate = value;
                    OnPropertyChanged("ModifiedDate");
                }
            }
        }
        private System.DateTime _modifiedDate;
    
        [DataMember]
        public byte[] TimeStamp
        {
            get { return _timeStamp; }
            set
            {
                if (_timeStamp != value)
                {
                    _timeStamp = value;
                    OnPropertyChanged("TimeStamp");
                }
            }
        }
        private byte[] _timeStamp;

        #endregion
        #region Complex Properties
    
        [DataMember]
        public Mail Mail
        {
            get
            {
                if (!_mailInitialized && _mail == null)
                {
                    _mail = new Mail();
                    ((INotifyComplexPropertyChanging)_mail).ComplexPropertyChanging += HandleMailChanging;
                }
                _mailInitialized = true;
                return _mail;
            }
            set
            {
                _mailInitialized = true;
                if (!Equals(_mail, value))
                {
                    if (_mail != null)
                    {
                        ((INotifyComplexPropertyChanging)_mail).ComplexPropertyChanging -= HandleMailChanging;
                    }
    
                    HandleMailChanging(this, null);
                    _mail = value;
                    OnPropertyChanged("Mail");
    
                    if (value != null)
                    {
                        ((INotifyComplexPropertyChanging)_mail).ComplexPropertyChanging += HandleMailChanging;
                    }
                }
            }
        }
        private Mail _mail;
        private bool _mailInitialized;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Contact Contact
        {
            get { return _contact; }
            set
            {
                if (!ReferenceEquals(_contact, value))
                {
                    var previousValue = _contact;
                    _contact = value;
                    FixupContact(previousValue);
                    OnNavigationPropertyChanged("Contact");
                }
            }
        }
        private Contact _contact;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
        // Records the original values for the complex property Mail
        private void HandleMailChanging(object sender, EventArgs args)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
        }
    
    
        protected virtual void ClearNavigationProperties()
        {
            Contact = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupContact(Contact previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Addresses.Contains(this))
            {
                previousValue.Addresses.Remove(this);
            }
    
            if (Contact != null)
            {
                if (!Contact.Addresses.Contains(this))
                {
                    Contact.Addresses.Add(this);
                }
    
                ContactID = Contact.ContactID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Contact")
                    && (ChangeTracker.OriginalValues["Contact"] == Contact))
                {
                    ChangeTracker.OriginalValues.Remove("Contact");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Contact", previousValue);
                }
                if (Contact != null && !Contact.ChangeTracker.ChangeTrackingEnabled)
                {
                    Contact.StartTracking();
                }
            }
        }

        #endregion
    }
}
