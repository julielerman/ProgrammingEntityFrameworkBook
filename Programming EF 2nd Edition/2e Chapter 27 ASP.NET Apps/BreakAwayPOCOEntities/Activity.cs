//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace BAGA
{
    	[Serializable()]
        [DataContractAttribute(IsReference=true)]
    public partial class Activity : POCO.State.StateObject
    {
        #region Primitive Properties
        [DataMember]
         public int ActivityID
        {
    	        get;
    		set;
    	
        }
        [DataMember]
         public string Name
        {
    		   get{return _name;} 
    			set
     				{
    					if (value != null && value.Length > 50) 
    					 {throw new ArgumentException("Name must be less than 50 characters");}
    			    else
      				{ _name = value;}
    				}
    
    	
        }
        private string _name;
        [DataMember]
         public string imagepath
        {
    		   get{return _imagepath;} 
    			set
     				{
    					if (value != null && value.Length > 100) 
    					 {throw new ArgumentException("imagepath must be less than 100 characters");}
    			    else
      				{ _imagepath = value;}
    				}
    
    	
        }
        private string _imagepath;
        [DataMember]
         public string Category
        {
    		   get{return _category;} 
    			set
     				{
    					if (value != null && value.Length > 50) 
    					 {throw new ArgumentException("Category must be less than 50 characters");}
    			    else
      				{ _category = value;}
    				}
    
    	
        }
        private string _category;

        #endregion
        #region Navigation Properties
    
        [DataMember]
    	public FixupCollection<Customer> PrimaryPrefCustomers
        {
            get
            {
                if (_primaryPrefCustomers == null)
                {
                    var newCollection = new FixupCollection<Customer>();
                    newCollection.CollectionChanged += FixupPrimaryPrefCustomers;
                    _primaryPrefCustomers = newCollection;
                }
                return _primaryPrefCustomers;
            }
            set
            {
                if (!ReferenceEquals(_primaryPrefCustomers, value))
                {
                    var previousValue = _primaryPrefCustomers as FixupCollection<Customer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPrimaryPrefCustomers;
                    }
                    _primaryPrefCustomers = value;
                    var newValue = value as FixupCollection<Customer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPrimaryPrefCustomers;
                    }
                }
            }
        }
        private FixupCollection<Customer> _primaryPrefCustomers;
    
        [DataMember]
    	public FixupCollection<Customer> SecondaryPrefCustomers
        {
            get
            {
                if (_secondaryPrefCustomers == null)
                {
                    var newCollection = new FixupCollection<Customer>();
                    newCollection.CollectionChanged += FixupSecondaryPrefCustomers;
                    _secondaryPrefCustomers = newCollection;
                }
                return _secondaryPrefCustomers;
            }
            set
            {
                if (!ReferenceEquals(_secondaryPrefCustomers, value))
                {
                    var previousValue = _secondaryPrefCustomers as FixupCollection<Customer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSecondaryPrefCustomers;
                    }
                    _secondaryPrefCustomers = value;
                    var newValue = value as FixupCollection<Customer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSecondaryPrefCustomers;
                    }
                }
            }
        }
        private FixupCollection<Customer> _secondaryPrefCustomers;
    
        [DataMember]
    	public FixupCollection<Equipment> Equipments
        {
            get
            {
                if (_equipments == null)
                {
                    var newCollection = new FixupCollection<Equipment>();
                    newCollection.CollectionChanged += FixupEquipments;
                    _equipments = newCollection;
                }
                return _equipments;
            }
            set
            {
                if (!ReferenceEquals(_equipments, value))
                {
                    var previousValue = _equipments as FixupCollection<Equipment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEquipments;
                    }
                    _equipments = value;
                    var newValue = value as FixupCollection<Equipment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEquipments;
                    }
                }
            }
        }
        private FixupCollection<Equipment> _equipments;
    
        [DataMember]
    	public FixupCollection<Trip> Trips
        {
            get
            {
                if (_trips == null)
                {
                    var newCollection = new FixupCollection<Trip>();
                    newCollection.CollectionChanged += FixupTrips;
                    _trips = newCollection;
                }
                return _trips;
            }
            set
            {
                if (!ReferenceEquals(_trips, value))
                {
                    var previousValue = _trips as FixupCollection<Trip>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTrips;
                    }
                    _trips = value;
                    var newValue = value as FixupCollection<Trip>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTrips;
                    }
                }
            }
        }
        private FixupCollection<Trip> _trips;

        #endregion
        #region Association Fixup
    
        private void FixupPrimaryPrefCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.PrimaryActivity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.PrimaryActivity, this))
                    {
                        item.PrimaryActivity = null;
                    }
                }
            }
        }
    
        private void FixupSecondaryPrefCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.SecondaryActivity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.SecondaryActivity, this))
                    {
                        item.SecondaryActivity = null;
                    }
                }
            }
        }
    
        private void FixupEquipments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Equipment item in e.NewItems)
                {
                    if (!item.Activities.Contains(this))
                    {
                        item.Activities.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Equipment item in e.OldItems)
                {
                    if (item.Activities.Contains(this))
                    {
                        item.Activities.Remove(this);
                    }
                }
            }
        }
    
        private void FixupTrips(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Trip item in e.NewItems)
                {
                    if (!item.Activities.Contains(this))
                    {
                        item.Activities.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Trip item in e.OldItems)
                {
                    if (item.Activities.Contains(this))
                    {
                        item.Activities.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
