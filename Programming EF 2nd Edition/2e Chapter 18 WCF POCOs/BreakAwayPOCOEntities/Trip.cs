//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace BAGA
{
    public partial class Trip : POCO.State.StateObject
    {
        #region Primitive Properties
    
        public int TripID
        {
    	        get;
            set;
    	    }
    
        public int DestinationID
        {
            get { return _destinationID; }
            set
            {
                if (_destinationID != value)
                {
                    if (Destination != null && Destination.DestinationID != value)
                    {
                        Destination = null;
                    }
                    _destinationID = value;
                }
            }
        }
        private int _destinationID;
    
        public int LodgingID
        {
            get { return _lodgingID; }
            set
            {
                if (_lodgingID != value)
                {
                    if (Lodging != null && Lodging.LodgingID != value)
                    {
                        Lodging = null;
                    }
                    _lodgingID = value;
                }
            }
        }
        private int _lodgingID;
    
        public System.DateTime StartDate
        {
    	        get;
            set;
    	    }
    
        public System.DateTime EndDate
        {
    	        get;
            set;
    	    }
    
        public Nullable<int> TripCostUSD
        {
    	        get;
            set;
    	    }

        #endregion
        #region Navigation Properties
    
        public Destination Destination
        {
            get { return _destination; }
            set
            {
                if (!ReferenceEquals(_destination, value))
                {
                    var previousValue = _destination;
                    _destination = value;
                    FixupDestination(previousValue);
                }
            }
        }
        private Destination _destination;
    
        public Lodging Lodging
        {
            get { return _lodging; }
            set
            {
                if (!ReferenceEquals(_lodging, value))
                {
                    var previousValue = _lodging;
                    _lodging = value;
                    FixupLodging(previousValue);
                }
            }
        }
        private Lodging _lodging;
    
        public FixupCollection<Reservation> Reservations
        {
            get
            {
                if (_reservations == null)
                {
                    var newCollection = new FixupCollection<Reservation>();
                    newCollection.CollectionChanged += FixupReservations;
                    _reservations = newCollection;
                }
                return _reservations;
            }
            set
            {
                if (!ReferenceEquals(_reservations, value))
                {
                    var previousValue = _reservations as FixupCollection<Reservation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReservations;
                    }
                    _reservations = value;
                    var newValue = value as FixupCollection<Reservation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReservations;
                    }
                }
            }
        }
        private FixupCollection<Reservation> _reservations;
    
        public FixupCollection<Activity> Activities
        {
            get
            {
                if (_activities == null)
                {
                    var newCollection = new FixupCollection<Activity>();
                    newCollection.CollectionChanged += FixupActivities;
                    _activities = newCollection;
                }
                return _activities;
            }
            set
            {
                if (!ReferenceEquals(_activities, value))
                {
                    var previousValue = _activities as FixupCollection<Activity>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupActivities;
                    }
                    _activities = value;
                    var newValue = value as FixupCollection<Activity>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupActivities;
                    }
                }
            }
        }
        private FixupCollection<Activity> _activities;

        #endregion
        #region Association Fixup
    
        private void FixupDestination(Destination previousValue)
        {
            if (previousValue != null && previousValue.Trips.Contains(this))
            {
                previousValue.Trips.Remove(this);
            }
    
            if (Destination != null)
            {
                if (!Destination.Trips.Contains(this))
                {
                    Destination.Trips.Add(this);
                }
                if (DestinationID != Destination.DestinationID)
                {
                    DestinationID = Destination.DestinationID;
                }
            }
        }
    
        private void FixupLodging(Lodging previousValue)
        {
            if (previousValue != null && previousValue.Trips.Contains(this))
            {
                previousValue.Trips.Remove(this);
            }
    
            if (Lodging != null)
            {
                if (!Lodging.Trips.Contains(this))
                {
                    Lodging.Trips.Add(this);
                }
                if (LodgingID != Lodging.LodgingID)
                {
                    LodgingID = Lodging.LodgingID;
                }
            }
        }
    
        private void FixupReservations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Reservation item in e.NewItems)
                {
                    item.Trip = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Reservation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Trip, this))
                    {
                        item.Trip = null;
                    }
                }
            }
        }
    
        private void FixupActivities(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Activity item in e.NewItems)
                {
                    if (!item.Trips.Contains(this))
                    {
                        item.Trips.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Activity item in e.OldItems)
                {
                    if (item.Trips.Contains(this))
                    {
                        item.Trips.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
