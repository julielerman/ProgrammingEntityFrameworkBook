//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace BAGA
{
    public partial class Address : POCO.State.StateObject
    {
        #region Primitive Properties
    
        public int addressID
        {
    	        get;
            set;
    	    }
    
        public string CountryRegion
        {
    		   get{return _countryRegion;} 
    			set
     				{
    					if (value != null && value.Length > 50) 
    					 {throw new InvalidOperationException("CountryRegion must be less than 50 characters");}
    			    else
      				{ _countryRegion = value;}
    				}
    
    	    }
        private string _countryRegion;
    
        public string PostalCode
        {
    		   get{return _postalCode;} 
    			set
     				{
    					if (value != null && value.Length > 20) 
    					 {throw new InvalidOperationException("PostalCode must be less than 20 characters");}
    			    else
      				{ _postalCode = value;}
    				}
    
    	    }
        private string _postalCode;
    
        public string AddressType
        {
    		   get{return _addressType;} 
    			set
     				{
    					if (value != null && value.Length > 10) 
    					 {throw new InvalidOperationException("AddressType must be less than 10 characters");}
    			    else
      				{ _addressType = value;}
    				}
    
    	    }
        private string _addressType;
    
        public int ContactID
        {
            get { return _contactID; }
            set
            {
                if (_contactID != value)
                {
                    if (Contact != null && Contact.ContactID != value)
                    {
                        Contact = null;
                    }
                    _contactID = value;
                }
            }
        }
        private int _contactID;
    
        public System.DateTime ModifiedDate
        {
    	        get;
            set;
    	    }
    
        public byte[] RowVersion
        {
    		   get{return _rowVersion;} 
    			set
     				{
      				{ _rowVersion = value;}
    				}
    
    	    }
        private byte[] _rowVersion;

        #endregion
        #region Complex Properties
    
        public Mail Mail
        {
            get { return _mail; }
            set { _mail = value; }
        }
        private Mail _mail = new Mail();

        #endregion
        #region Navigation Properties
    
        public Contact Contact
        {
            get { return _contact; }
            set
            {
                if (!ReferenceEquals(_contact, value))
                {
                    var previousValue = _contact;
                    _contact = value;
                    FixupContact(previousValue);
                }
            }
        }
        private Contact _contact;

        #endregion
        #region Association Fixup
    
        private void FixupContact(Contact previousValue)
        {
            if (previousValue != null && previousValue.Addresses.Contains(this))
            {
                previousValue.Addresses.Remove(this);
            }
    
            if (Contact != null)
            {
                if (!Contact.Addresses.Contains(this))
                {
                    Contact.Addresses.Add(this);
                }
                if (ContactID != Contact.ContactID)
                {
                    ContactID = Contact.ContactID;
                }
            }
        }

        #endregion
    }
}
